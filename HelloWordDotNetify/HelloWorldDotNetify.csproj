<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Pages\Home\Home.tsx" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Autofac" Version="4.6.1" />
    <PackageReference Include="Autofac.Extensions.DependencyInjection" Version="4.2.0" />
    <PackageReference Include="DotNetify.Core" Version="2.2.1-pre" />
    <PackageReference Include="DotNetify.SignalR" Version="2.2.1-pre" />
    <PackageReference Include="Easy.MessageHub" Version="3.2.0" />
    <PackageReference Include="MediatR" Version="3.0.1" />
    <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.0" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.0" />
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="Handler\" />
    <Folder Include="wwwroot\img\" />
  </ItemGroup>
  
  <ItemGroup>
    <ProjectReference Include="..\Dotnetifiy.Messaging\Dotnetifiy.Messaging.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <TypeScriptCompile Include="Pages\Home\Home.tsx" />
    <TypeScriptCompile Include="_Typescript\index.ts" />
    <TypeScriptCompile Include="_Typescript\definition\dotnetify-react.router.d.ts" />
  </ItemGroup>
  
  <ItemGroup>
    <None Update="_Typescript\typewriter\IAboutState.ts">
      <CustomToolNamespace>Pages\About\IAboutState.cs</CustomToolNamespace>
    </None>
    <None Update="_Typescript\typewriter\IHelloWorldState.ts">
      <CustomToolNamespace>Modules\HelloWorld\IHelloWorldState.cs</CustomToolNamespace>
    </None>
    <None Update="_Typescript\typewriter\IHomeState.ts">
      <CustomToolNamespace>Pages\Home\IHomeState.cs</CustomToolNamespace>
    </None>
    <None Update="_Typescript\typewriter\ITestState.ts">
      <CustomToolNamespace>Pages\Test\ITestState.cs</CustomToolNamespace>
    </None>
    <None Update="_Typescript\typewriter\ParagrapheStateDTO.ts">
      <CustomToolNamespace>Pages\Home\ParagrapheStateDTO.cs</CustomToolNamespace>
    </None>
  </ItemGroup>


  <Target Name="DebugRunWebpackVendor" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('wwwroot\dist\vendor.js') ">
    <!-- if no vendor.js run webpack with webpack.config.vendor.js. -->
    <Message Importance="high" Text="No vendor.js in wwwroot/dist =&gt; Performing Webpack vendor build..." />
    <Exec Command="node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js" />
  </Target>
  
  <Target Name="DebugRunWebpack" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('wwwroot\dist\main-client.js') ">
    <!--if no main-client.js run webpack. -->
    <Message Importance="high" Text="No main-client.js in wwwroot/dist =&gt; Performing Webpack build..." />
    <Exec Command="node node_modules/webpack/bin/webpack.js" />
  </Target>
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec Command="npm install" />
    <Exec Command="node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js --env.prod" />
    <Exec Command="node node_modules/webpack/bin/webpack.js --env.prod" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="wwwroot\dist\**;ServerDist\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
